<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 28 Apr 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://example.com/post/post4/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/post4/</guid>
      <description>&lt;h2 id=&#34;цели&#34;&gt;Цели&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Выполнить 12 лабораторную работу по ОС&lt;/li&gt;
&lt;li&gt;Выполнить четвертый и пятый этапы индивидуального проекта&lt;/li&gt;
&lt;li&gt;Подготовиться к контрольной по математической логике&lt;/li&gt;
&lt;li&gt;Выполнить задания по технологии программирования&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-прошла-моя-неделя&#34;&gt;Как прошла моя неделя?&lt;/h2&gt;
&lt;p&gt;Неделя прошла достаточно продуктивно. В понедельник были дистанционные занятия, я успела немного прогуляться, сделать домашнее задание по математическому анализу и приготовить вкусный ужин!! Даже успела выйти на пробежку и сделать растяжку! Во вторник я сделала 12 лабораторную работу по операционным системам, она мне показалась достаточно интересной. Затем я также успела выполнить пятый этап проекта по ОС. Планирую также успеть сделать и шестой этап прокта, а также начать выполнение внешнего курса. Сегодня вечером хочу успеть прогуляться и посмотреть свой любимый сериал!&lt;/p&gt;
&lt;h2 id=&#34;результаты&#34;&gt;Результаты&lt;/h2&gt;
&lt;p&gt;Удалось выполнить все поставленные задачи!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://example.com/post/programming-languages/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/programming-languages/</guid>
      <description>&lt;h2 id=&#34;языки-научного-программирования&#34;&gt;Языки научного программирования&lt;/h2&gt;
&lt;p&gt;Программирование часто упоминают в прикладном контексте. Кажется, с его помощью создают только мобильные приложения, интернет-системы и спецэффекты для кино. Но первоначально программирование предназначалось для решения научных задач. Кроме того, программирование само — наука, узнать о которой будет полезно тем, кто решил связать карьеру с компьютерной разработкой.&lt;/p&gt;
&lt;p&gt;Научное программирование — высокоориентированный стиль программирования для научных расчетов. От других видов программирования его отличают предельные корректность и стабильность конечного продукта, строгое разделение научной и интерфейсной частей, индивидуальность алгоритмов, а также преобладание эффективности над универсальностью.&lt;/p&gt;
&lt;p&gt;Научное программирование лежит в основе любого современного глобального исследования. Все передовые технологии — от квантовых компьютеров до космических программ — были бы невозможны без специалистов в области научного программирования, способных предоставить ученым надежный и точный инструмент для совершения открытий.&lt;/p&gt;
&lt;p&gt;Рассмотрим несколько языков:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Bash
Сценарии командной оболочки Unix, созданные Кеном Томпсоном в начале 1970-х годов, тесно связаны с языком программирования C. Bash — обновленная оболочка Unix — была впервые выпущена в конце 80-х годов и до сих пор активно разрабатывается. На Bash обычно пишутся сценарии конфигурации сервера, поэтому это хороший выбор для работы в современных облачных средах с контейнерным хранением и микросервисами. Скрипты командной оболочки используются достаточно часто, так что знание этого языка пригодится. Также стоит обратить внимание на zsh, который в настоящее время является оболочкой по умолчанию в macOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COBOL
Один из старейших языков, используемых до сих пор, был создан Грейс Хоппер в конце 1950-х годов и предназначался для стандартизации разработки крупномасштабных бизнес-приложений на компьютерах. Блестящая концепция, которая до сих пор применяется в кроссплатформенных SDK. Через системы COBOL проходят невероятные 95% транзакций ATM, причем многие из этих устройств работают круглосуточно 365 дней в году. Такие поставщики устройств, как IBM, разрабатывают более мощные машины, предназначенные для COBOL, но продолжают обслуживать и обновлять существующие системы из-за затрат и рисков, связанных с их заменой. В ближайшее время COBOL никуда не уйдет. Это хороший выбор для тех, кто хочет работать с клиентами из финансовой сферы.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++
Эти языки часто занимают вершины различных рейтингов — их ценят за мощность и быстродействие. C был создан в начале 1970-х годов Деннисом Ритчи, C ++ в 1985 году разработал Бьёрн Страуструп. Сегодня два этих языка лежат в основе всего: от ОС и игр до современных научных вычислений и машинного обучения. C и C++ хорошо подходят для требовательных приложений, которым важны низкоуровневый доступ к оборудованию и производительность. Для освоения этих языков нужно время и определенные усилия.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Оформление отчёта</title>
      <link>https://example.com/post/reports/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/reports/</guid>
      <description>&lt;h2 id=&#34;оформление-отчёта&#34;&gt;Оформление отчёта&lt;/h2&gt;
&lt;p&gt;Отчёт - возможность лучше погрузиться в свою работу и лучше проанализировать её. У нас есть задача и мы фиксируем ее выполнение в форме отчета о проделанной работе. Во время обучения учащиеся часто составляют такой документ, он позволяет оценить, насколько качественно и как быстро выполнена задача, также заставляет задуматься о каких-то закономерностях. Также отчёты часто используются во время работы в различных компаниях, так как сотруднику необходимо отчитываться о проделанной работе. У отчёта может быть разное наполнение - всё зависит от требований, которые выдвигаются.
Так, например, по такой дисциплине, как «Операционные системы» отчёт должен включать в себя:
• Титульный лист с указанием номера лабораторной работы и ФИО студента.
• Формулировка цели работы.
• Описание результатов выполнения лабораторной работы:
– описание выполняемого задания;
– скриншоты (снимки экрана), фиксирующие выполнение заданий лабораторной работы;
– комментарии и выводы по результатам выполнения заданий.
• Описание результатов выполнения заданий для самостоятельной работы:
– описание выполняемого задания;
– скриншоты (снимки экрана), фиксирующие выполнение заданий;
– комментарии и выводы по результатам выполнения заданий.
• Выводы, согласованные с целью работы.
Стоит также отметить, что отчёт должен быть выполнен в нескольких форматах(md, docx, pdf). Формат md позволяет сконвертировать сразу и docx, и pdf.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://example.com/post/post3/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/post3/</guid>
      <description>&lt;h2 id=&#34;цели&#34;&gt;Цели&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Выполнить 12 и 13 лабораторную работу по ОС&lt;/li&gt;
&lt;li&gt;Выполнить четвёртый этап индивидуального проекта&lt;/li&gt;
&lt;li&gt;Много гулять на выходных&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-прошла-моя-неделя&#34;&gt;Как прошла моя неделя?&lt;/h2&gt;
&lt;p&gt;Неделя прошла достаточно продукктивно и легко. С возвращением хорошей погоды я снова начала бегать, а также довольно активно провела выходные - много гуляла и смотрела разные улочки Москвы. Разобрала также на выходных тему по математическому анализу, сейчас мы изучаем там нахождение площади поверхности тела с помощью интеграла. Лабораторные работы по Операционнымм системам, которые я намечала сделать, оказались сделаны. Скоро я поеду в родной город на выходные, надеюсь, что также будет стоять хорошая погода, а еще мечтаю потискать своего рыжего кота!! В общем, хорошая погода определённо поднимает настроение и продуктивность, поэтому всё хорошо!&lt;/p&gt;
&lt;h2 id=&#34;результаты&#34;&gt;Результаты&lt;/h2&gt;
&lt;p&gt;Удалось выполнить все поставленные задачи!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://example.com/post/post2/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/post2/</guid>
      <description>&lt;h2 id=&#34;цели&#34;&gt;Цели&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Выполнить 9 лабораторную работу по ОС&lt;/li&gt;
&lt;li&gt;Выполнить третий этап индивидуального проекта&lt;/li&gt;
&lt;li&gt;Подготовиться к контрольной по математической логике&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-прошла-моя-неделя&#34;&gt;Как прошла моя неделя?&lt;/h2&gt;
&lt;p&gt;Неделя прошла достаточно продуктивно. В понедельник были дистанционные занятия, я успела немного прогуляться, сделать домашнее задание по математическому анализу и приготовить вкусный ужин!! Во вторник я сделала 9 лабораторную работу по операционным системам, она мне показалась достаточно интересной, там я работала с редактором emacs. Также вечером я подготовилась к контрольной работе по математической логике и разобрала последнюю тему по аналитической геометрии. В среду у нас была контрольная по математической логике, результатов пока у нас нет. Также в среду я начала делать третий этап индивидуального проекта. Вечером я немного прогулялась и посмотрела свой любимый сериал!&lt;/p&gt;
&lt;h2 id=&#34;результаты&#34;&gt;Результаты&lt;/h2&gt;
&lt;p&gt;Удалось выполнить все поставленные задачи!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown</title>
      <link>https://example.com/post/markdown/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/markdown/</guid>
      <description>&lt;h2 id=&#34;язык-разметки-markdown&#34;&gt;Язык разметки Markdown&lt;/h2&gt;
&lt;p&gt;Markdown — удобочитаемый язык разметки, который прозрачно конвертируется в HTML. Его можно открывать и изменять в любом редакторе текста. Широко используется для написания документаций и README-файлов. Markdown, или маркдаун, — это язык разметки для текстовых документов. Он позволяет создавать тексты без использования Word и других редакторов. Разметку можно прочитать и воспроизвести в любой системе или браузере. Маркдаун создал писатель и блогер Джон Грубер вместе с веб-активистом Аароном Шварцем. Они хотели придумать максимально простой и удобный язык разметки, с помощью которого текст можно перевести в красиво оформленный вид. При этом текст обязан оставаться читаемым даже без приведения к «красивому» виду. Таким и оказался Markdown. Его создали в 2004 году, но наибольшую популярность язык получил сейчас. Его поддерживают разнообразные платформы для блогов, сервисы создания заметок, CMS и даже мессенджеры.&lt;/p&gt;
&lt;p&gt;Для чего нужен маркдаун&lt;/p&gt;
&lt;p&gt;•	Быстрое форматирование статьи для перевода в PDF или чтобы она просто выглядела красиво без лишних усилий.
•	Верстка текстового документа для размещения на сайте, но без применения HTML.
•	Написание документации для кода.
•	Составление заметок в личном цифровом блокноте.
•	Написание красивых сообщений в мессенджерах&lt;/p&gt;
&lt;p&gt;Вот некоторые правила:&lt;/p&gt;
&lt;p&gt;Чтобы создать заголовок, используйте знак #, например:&lt;/p&gt;
&lt;h1 id=&#34;this-is-heading-1--this-is-heading-2--this-is-heading-3--this-is-heading-4&#34;&gt;This is heading 1 ## This is heading 2 ### This is heading 3 #### This is heading 4&lt;/h1&gt;
&lt;p&gt;Чтобы задать для текста полужирное начертание, заключите его в двойные звездочки:
This text is &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Чтобы задать для текста курсивное начертание, заключите его в одинарные звездочки:
This text is &lt;em&gt;italic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Чтобы задать для текста полужирное и курсивное начертание, заключите его в тройные звездочки:
This is text is both &lt;em&gt;&lt;strong&gt;bold and italic&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Блоки цитирования создаются с помощью символа &amp;gt;.&lt;/p&gt;
&lt;p&gt;Markdown поддерживает как встраивание фрагментов кода в предложение, так и их размещение между предложениями в виде отдельных огражденных блоков. Огражденные блоки кода — это простой способ выделить синтаксис для фрагментов кода. Общий формат огражденных блоков кода:
&lt;code&gt;language your code goes in here&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://example.com/post/post1/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/post1/</guid>
      <description>&lt;h2 id=&#34;цели&#34;&gt;Цели&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Выполнить 5 и 6 лабораторные работы по ОС&lt;/li&gt;
&lt;li&gt;Выполнить домашнее задание по основам программирования&lt;/li&gt;
&lt;li&gt;Подготовиться к контрольной по математическому анализу&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-прошла-моя-неделя&#34;&gt;Как прошла моя неделя?&lt;/h2&gt;
&lt;p&gt;Эта неделя прошла достаточно легко. Я была в родном городе - в Твери, провела время с семьёй, мы отпраздновали 8 марта. Из учебных достижений - успела сделать 5 и 6 лабораторные работы по операционным системам, они оказалась несложными, я справилась относительно быстро.  Ещё занималась программированием на с++, делала домашнее задание, которое было по теме односвязных списков и сдала его. Также на модуле по английскому языку у нас был праздник весны, я выступала со своей группой с песней happy nation, нам было довольно весело!!&lt;/p&gt;
&lt;h2 id=&#34;результаты&#34;&gt;Результаты&lt;/h2&gt;
&lt;p&gt;Удалось выполнить все поставленные задачи!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями git</title>
      <link>https://example.com/post/git_versions/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/git_versions/</guid>
      <description>&lt;h2 id=&#34;управление-версиями-git&#34;&gt;Управление версиями git&lt;/h2&gt;
&lt;p&gt;Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется. В классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений, пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним  можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельта-компрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных. Системы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (автоматически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ только одному пользователю, работающему с файлом. Системы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить. В отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным. Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
